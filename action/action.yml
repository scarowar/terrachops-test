name: 'Terrachops'
description: 'A reusable composite action for streamlined, IssueOps-driven Terraform deployments.'
author: 'Scarowar'

branding:
  icon: 'terminal'
  color: 'purple'

inputs:
  github-token:
    description: 'The GitHub token for authentication.'
    required: true
  terraform-version:
    description: 'The version of Terraform to install.'
    required: false
    default: 'latest'
  working-directory:
    description: 'The path to the Terraform code.'
    required: false
    default: '.'
  noop-trigger:
    description: 'The comment trigger for a terraform plan.'
    required: false
    default: '.tf plan'
  trigger:
    description: 'The comment trigger for a terraform apply.'
    required: false
    default: '.tf apply'

runs:
  using: 'composite'
  steps:
  - name: 'IssueOps Command Dispatcher'
    id: branch-deploy
    uses: github/branch-deploy@e837cad62fcc6f5f45997baafd69c57ea9b0641d
    with:
      github_token: ${{ inputs.github-token }}
      noop_trigger: ${{ inputs.noop-trigger }}
      trigger: ${{ inputs.trigger }}

  - name: Checkout Code
    if: steps.branch-deploy.outputs.continue == 'true'
    uses: actions/checkout@v4
    with:
      ref: ${{ steps.branch-deploy.outputs.sha }}

  - name: Setup Terraform
    if: steps.branch-deploy.outputs.continue == 'true'
    uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
    with:
      terraform_version: ${{ inputs.terraform-version }}

  - name: Terraform Init
    if: steps.branch-deploy.outputs.continue == 'true'
    id: init
    run: terraform init
    shell: bash
    working-directory: ${{ inputs.working-directory }}

  - name: Terraform Format Check
    if: steps.branch-deploy.outputs.continue == 'true'
    id: fmt
    run: terraform fmt -check
    shell: bash
    working-directory: ${{ inputs.working-directory }}

  - name: Terraform Validate
    if: steps.branch-deploy.outputs.continue == 'true'
    id: validate
    run: terraform validate
    shell: bash
    working-directory: ${{ inputs.working-directory }}

  - name: Terraform Plan
    if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
    id: plan
    run: |
      terraform plan -no-color -out=tfplan.binary > tfplan.txt
      mv tfplan.binary tfplan-${{ steps.branch-deploy.outputs.sha }}.binary
    shell: bash
    working-directory: ${{ inputs.working-directory }}

  - name: Upload Plan Text Artifact
    if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
    uses: actions/upload-artifact@v4
    with:
      name: terraform-plan-txt-${{ steps.branch-deploy.outputs.sha }}
      path: ${{ inputs.working-directory }}/tfplan.txt

  - name: Upload Plan Binary Artifact
    if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
    uses: actions/upload-artifact@v4
    with:
      name: terraform-plan-bin-${{ steps.branch-deploy.outputs.sha }}
      path: ${{ inputs.working-directory }}/tfplan-${{ steps.branch-deploy.outputs.sha }}.binary

  - name: Create Plan Comment
    if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
    uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
    with:
      token: ${{ inputs.github-token }}
      issue-number: ${{ github.event.issue.number }}
      body: |
        ### Terraform Plan

        ```terraform
        ${{ steps.plan.outputs.stdout }}
        ```

  - name: Download Plan Artifact
    if: steps.branch-deploy.outputs.noop == 'false'
    uses: dawidd6/action-download-artifact@ac66b43f0e6a346234dd65d4d0c8fbb31cb316e5
    with:
      github_token: ${{ inputs.github-token }}
      workflow: ${{ github.workflow }}
      pr: ${{ github.event.issue.number }}
      name: terraform-plan-bin-${{ steps.branch-deploy.outputs.sha }}
      path: ${{ inputs.working-directory }}
      if_no_artifact_found: 'fail'

  - name: Terraform Apply
    if: steps.branch-deploy.outputs.noop == 'false'
    id: apply
    run: terraform apply -no-color -auto-approve tfplan-${{ steps.branch-deploy.outputs.sha }}.binary
    shell: bash
    working-directory: ${{ inputs.working-directory }}

  - name: Update PR with Apply Result
    if: steps.branch-deploy.outputs.noop == 'false'
    uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
    with:
      token: ${{ inputs.github-token }}
      issue-number: ${{ github.event.issue.number }}
      body: |
        ### Terraform Apply Complete

        **Result:** `${{ steps.apply.outcome }}`

        <details><summary>Show Apply Output</summary>

        ```
        ${{ steps.apply.outputs.stdout }}
        ```

        </details>
