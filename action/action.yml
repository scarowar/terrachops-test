name: 'Terrachops'
description: 'A reusable composite action for streamlined, IssueOps-driven Terraform deployments.'
author: 'Scarowar'

branding:
  icon: 'terminal'
  color: 'purple'

inputs:
  github-token:
    description: 'The GitHub token for authentication.'
    required: true
  terraform-version:
    description: 'The version of Terraform to install.'
    required: false
    default: 'latest'
  working-directory:
    description: 'The path to the Terraform code.'
    required: false
    default: '.'
  noop-trigger:
    description: 'The comment trigger for a terraform plan.'
    required: false
    default: '.tf plan'
  trigger:
    description: 'The comment trigger for a terraform apply.'
    required: false
    default: '.tf apply'
  stable_branch:
    description: 'The name of the stable branch for rollback deployments.'
    required: false
    default: 'main'
  skip-sparse-checkout:
    description: 'Skip the sparse checkout step (for local testing)'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
  - name: Checkout Config File
    if: inputs.skip-sparse-checkout != 'true'
    uses: actions/checkout@v4
    with:
      sparse-checkout: |
        .terrachops.yml
      sparse-checkout-cone-mode: false
      ref: ${{ github.event.repository.default_branch }}

  - name: Pre-flight Checks
    id: preflight
    run: |
      if [ -f ".terrachops.yml" ]; then
        ENVS=$(yq e '.environments | keys | .[]' .terrachops.yml | tr '\n' ',' | sed 's/,$//')
        echo "Discovered environments: $ENVS"
        echo "available_envs=${ENVS}" >> "$GITHUB_OUTPUT"
      else
        echo "available_envs=" >> "$GITHUB_OUTPUT"
      fi
    shell: bash

  - name: 'IssueOps Command Dispatcher'
    id: branch-deploy
    uses: github/branch-deploy@e837cad62fcc6f5f45997baafd69c57ea9b0641d
    with:
      github_token: ${{ inputs.github-token }}
      noop_trigger: ${{ inputs.noop-trigger }}
      trigger: ${{ inputs.trigger }}
      environment_targets: "${{ steps.preflight.outputs.available_envs || 'production' }}"
      stable_branch: ${{ inputs.stable_branch }}

  - name: Checkout Code
    if: steps.branch-deploy.outputs.continue == 'true'
    uses: actions/checkout@v4
    with:
      ref: ${{ steps.branch-deploy.outputs.sha }}
      fetch-depth: 0

  - name: Ensure prepare-terrachops.sh is executable
    if: steps.branch-deploy.outputs.continue == 'true'
    run: chmod +x ${{ github.action_path }}/scripts/prepare-terrachops.sh
    shell: bash

  - name: Prepare Terrachops Commands
    if: steps.branch-deploy.outputs.continue == 'true'
    id: prepare_cmds
    run: |
      ${{ github.action_path }}/scripts/prepare-terrachops.sh \
        "${{ inputs.working-directory }}" \
        "${{ steps.branch-deploy.outputs.environment }}" \
        "${{ steps.branch-deploy.outputs.params }}"
    shell: bash

  - name: Setup Terraform
    if: steps.branch-deploy.outputs.continue == 'true'
    uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
    with:
      terraform_version: ${{ inputs.terraform-version }}

  - name: Terraform Init
    if: steps.branch-deploy.outputs.continue == 'true'
    id: init
    run: terraform init ${{ steps.prepare_cmds.outputs.init_args }}
    shell: bash
    working-directory: ${{ steps.prepare_cmds.outputs.working_dir }}

  - name: Terraform Format Check
    if: steps.branch-deploy.outputs.continue == 'true'
    id: fmt
    run: terraform fmt -check
    shell: bash
    working-directory: ${{ steps.prepare_cmds.outputs.working_dir }}

  - name: Terraform Validate
    if: steps.branch-deploy.outputs.continue == 'true'
    id: validate
    run: terraform validate
    shell: bash
    working-directory: ${{ steps.prepare_cmds.outputs.working_dir }}

  - name: Rollback Plan and Apply
    if: steps.branch-deploy.outputs.ref == inputs.stable_branch && steps.branch-deploy.outputs.noop == 'false'
    id: rollback
    run: |
      echo "ðŸš¨ Performing immediate plan and apply for stable branch rollback."
      # The 'set +e' and 'set -e' lines ensure the step continues even if terraform apply fails,
      # so the final status comment can be posted.
      set +e
      terraform plan ${{ steps.prepare_cmds.outputs.plan_args }} -out=rollback.plan
      terraform apply -auto-approve ${{ steps.prepare_cmds.outputs.apply_args }} rollback.plan
      # Capture the exit code of the apply command
      TF_EXIT_CODE=$?
      set -e
      exit $TF_EXIT_CODE
    shell: bash
    working-directory: ${{ steps.prepare_cmds.outputs.working_dir }}

  - name: Update PR with Rollback Result
    if: steps.branch-deploy.outputs.ref == inputs.stable_branch && steps.branch-deploy.outputs.noop == 'false'
    uses: peter-evans/create-or-update-comment@v4
    with:
      token: ${{ inputs.github-token }}
      issue-number: ${{ github.event.issue.number }}
      body: |
        ### ðŸš¨ Rollback Apply Complete
        **Result:** `${{ steps.rollback.outcome }}`
        A rollback to the `${{ inputs.stable_branch }}` branch has been attempted.

  - name: Terraform Plan
    if: ${{ steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'true' }}
    id: plan
    shell: bash
    run: |
      terraform plan ${{ steps.prepare_cmds.outputs.plan_args }} -no-color -out=tfplan.binary > tfplan.txt
      mv tfplan.binary tfplan-${{ steps.branch-deploy.outputs.sha }}.binary
    working-directory: ${{ steps.prepare_cmds.outputs.working_dir }}

  - name: Upload Plan Text Artifact
    if: ${{ steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'true' }}
    uses: actions/upload-artifact@v4
    with:
      name: terraform-plan-txt-${{ steps.branch-deploy.outputs.sha }}
      path: ${{ steps.prepare_cmds.outputs.working_dir }}/tfplan.txt

  - name: Upload Plan Binary Artifact
    if: ${{ steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'true' }}
    uses: actions/upload-artifact@v4
    with:
      name: terraform-plan-bin-${{ steps.branch-deploy.outputs.sha }}
      path: ${{ steps.prepare_cmds.outputs.working_dir }}/tfplan-${{ steps.branch-deploy.outputs.sha }}.binary

  - name: Tag Commit with Plan Run ID
    if: ${{ steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'true' }}
    env:
      GH_TOKEN: ${{ inputs.github-token }}
    run: |
      TAG_NAME="terrachops/plan/${{ github.run_id }}/${{ steps.branch-deploy.outputs.sha }}"
      TAG_MESSAGE="Terrachops plan artifact from run ${{ github.run_id }}. Triggered by @${{ github.actor }} on $(date -u)."

      if git rev-parse -q --verify "refs/tags/$TAG_NAME" >/dev/null; then
        echo "Overwriting existing plan tag for this commit."
      fi

      echo "Creating git tag: $TAG_NAME"
      git config user.name "github-actions[bot]"
      git config user.email "github-actions[bot]@users.noreply.github.com"
      git tag -f "$TAG_NAME" "${{ steps.branch-deploy.outputs.sha }}" -m "$TAG_MESSAGE"
      git push -f origin "refs/tags/$TAG_NAME"
    shell: bash

  - name: Create Plan Comment
    if: ${{ steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'true' }}
    uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
    with:
      token: ${{ inputs.github-token }}
      issue-number: ${{ github.event.issue.number }}
      body: |
        ### Terraform Plan

        ```terraform
        ${{ steps.plan.outputs.stdout }}
        ```

  - name: Find Plan Run ID from Git Tag
    if: ${{ steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'false' }}
    id: find_run_id
    run: |
      git fetch --tags
      COMMIT_SHA="${{ steps.branch-deploy.outputs.sha }}"
      TAG=$(git for-each-ref "refs/tags/terrachops/plan/*/${COMMIT_SHA}" --sort=-creatordate --format='%(refname:short)' | head -n 1)

      if [ -z "$TAG" ]; then
        echo "::error::No Terrachops plan tag found for commit $COMMIT_SHA. Please run '.tf plan' first."
        exit 1
      fi

      echo "Found tag: $TAG"
      RUN_ID=$(echo "$TAG" | cut -d'/' -f3)
      echo "run_id=${RUN_ID}" >> "$GITHUB_OUTPUT"
    shell: bash

  - name: Download Plan Artifact
    if: ${{ steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'false' }}
    uses: actions/download-artifact@v4
    with:
      github-token: ${{ inputs.github-token }}
      run-id: ${{ steps.find_run_id.outputs.run_id }}
      name: terraform-plan-bin-${{ steps.branch-deploy.outputs.sha }}
      path: ${{ steps.prepare_cmds.outputs.working_dir }}

  - name: Terraform Apply
    if: ${{ steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'false' }}
    id: apply
    shell: bash
    run: terraform apply ${{ steps.prepare_cmds.outputs.apply_args }} -no-color -auto-approve tfplan-${{ steps.branch-deploy.outputs.sha }}.binary
    working-directory: ${{ steps.prepare_cmds.outputs.working_dir }}

  - name: Update PR with Apply Result
    if: ${{ steps.branch-deploy.outputs.ref != inputs.stable_branch && steps.branch-deploy.outputs.noop == 'false' }}
    uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043
    with:
      token: ${{ inputs.github-token }}
      issue-number: ${{ github.event.issue.number }}
      body: |
        ### Terraform Apply Complete

        **Result:** `${{ steps.apply.outcome }}`

        <details><summary>Show Apply Output</summary>

        ```
        ${{ steps.apply.outputs.stdout }}
        ```

        </details>
